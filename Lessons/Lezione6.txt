### Chapter 6: Software Configuration Management

#### Acronyms:
- CCB: Configuration Control Board
- CM: Configuration Management
- FCA: Functional Configuration Audit
- PCA: Physical Configuration Audit
- SCCB: Software Configuration Control Board
- SCI: Software Configuration Item
- SCM: Software Configuration Management
- SCMP: Software Configuration Management Plan
- SCR: Software Change Request
- SCSA: Software Configuration Status Accounting
- SDD: Software Design Document
- SEI/CMMI: Software Engineering Instituteâ€™s Capability Maturity Model Integration
- SQA: Software Quality Assurance
- SRS: Software Requirement Specification

#### Introduction
A system is defined as the combination of interacting elements organized to achieve one or more stated purposes. The configuration of a system is the functional and physical characteristics of hardware or software. Configuration management (CM) is the discipline of identifying the configuration of a system at distinct points in time for controlling changes and maintaining integrity. Software configuration management (SCM) is a supporting software life cycle process that benefits project management, development, maintenance, quality assurance, and end users.

#### Management of the SCM Process

**1.1 Organizational Context for SCM:**
- Understanding the organizational context and relationships among elements.
- Interaction with hardware and firmware CM activities.
- Interface with quality assurance, development, and maintenance organizations.
- SCM tools supporting multiple purposes.

**1.2 Constraints and Guidance for the SCM Process:**
- Constraints from policies, procedures, contracts, regulatory bodies, and software life cycle processes.
- Impact of software life cycle models on SCM activities.

**1.3 Planning for SCM:**
- Consistent planning with organizational context, constraints, guidance, and project nature.
- Activities: configuration identification, control, status accounting, auditing, release management.
  
   **1.3.1 SCM Organization and Responsibilities:**
   - Identification of roles and responsibilities for SCM tasks.
   - Authority and reporting channels clarification.

   **1.3.2 SCM Resources and Schedules:**
   - Identification of staff, tools, and scheduling of SCM tasks.
   - Addressing training requirements.

   **1.3.3 Tool Selection and Implementation:**
   - Considerations for tool acquisition, organization, environment, legacy, financing, scope, ownership, future, change, branching, merging, integration, and migration.

   **1.3.4 Vendor/Subcontractor Control:**
   - Incorporating purchased and subcontracted software into SCM.
   - Establishing SCM requirements for subcontracted software.

   **1.3.5 Interface Control:**
   - Identifying interfacing items and managing changes.
   - Coordination with system-level interface processes.

**1.4 SCM Plan:**
- Recording planning results in the Software Configuration Management Plan (SCMP).
- SCMP content: Introduction, SCM Management, SCM Activities, SCM Schedules, SCM Resources, SCMP Maintenance.

**1.5 Surveillance of Software Configuration Management:**
- Monitoring SCMP compliance.
- Integrated SCM tools with process control capability.
  
   **1.5.1 SCM Measures and Measurement:**
   - Designing measures for product evolution and SCM process insight.
   - Discovering opportunities for process improvement.

   **1.5.2 In-Process Audits of SCM:**
   - Audits during the software engineering process to assess configuration status and SCM process implementation.

This chapter provides an overview of SCM, emphasizing organizational context, planning considerations, and surveillance mechanisms for effective software configuration management.

### 2 Software Configuration Identification

#### 2.1 Identifying Items to Be Controlled

**2.1.1 Software Configuration:**
- Definition: Functional and physical characteristics of hardware or software.
- Relationship with system configuration.

**2.1.2 Software Configuration Item (SCI):**
- Definition: An item or aggregation of hardware or software managed as a single entity.
- Selection of SCIs: Plans, specifications, design documentation, testing materials, tools, code, libraries, data, documentation.
- Balancing visibility and manageability.

**2.1.3 Software Configuration Item Relationships:**
- Importance of structural relationships for SCM tasks.
- Support for traceability.
- Design considerations for identification schemes.

**2.1.4 Software Version:**
- Definition: An identified instance of a software item.
- Evolution of software items.
- Variant as a version resulting from software diversity.

**2.1.5 Baseline:**
- Definition: A formally approved version fixed at a specific time during an item's life cycle.
- Types: Functional, allocated, developmental, product baselines.
- Representing the current approved configuration.
- Authority for change approval.

**2.1.6 Acquiring Software Configuration Items:**
- Incorporation into a baseline triggered by completion of formal acceptance tasks.
- Origin and initial integrity establishment.
- Formal approval for changes.
- Incorporation into the baseline according to SCMP.

#### Figure 6.2. Acquisition of Items:
- Illustrates the growth of baselined items in the software life cycle.
- Based on the waterfall model.
- Shows versions of evolving items and the role of the Software Change Request (SCR).

#### 2.2 Software Library:

**Definition:**
- A controlled collection aiding software development, use, or maintenance.
- Instrumental in software release management and delivery.

**Types of Libraries:**
- Working Library: Supports coding and development activities.
- Project Support Library: Supports testing activities.
- Master Library: Used for finished products.

**SCM Control and Security:**
- Each library associated with an appropriate baseline and level of authority.
- Security considerations: Access control and backup facilities.
- Tool support for controlling SCIs and access.

**Library Levels and SCM:**
- Working Library: Code management for developers, maintainers, and SCM.
- Higher Levels: More restricted access, SCM as the primary user.
- Important source for measuring work and progress.

### 3 Software Configuration Control

#### 3.1 Requesting, Evaluating, and Approving Software Changes

**3.1.1 Software Configuration Control Board (CCB):**
- Definition: Entity responsible for accepting or rejecting proposed changes.
- Authority levels and criteria.
- Composition and representation.
- Software Configuration Control Board (SCCB) for strictly software scope.
- Subject to software quality audit or review.

**3.1.2 Software Change Request Process:**
- Definition: Formal procedures for submitting and recording change requests.
- Criteria for change authority levels.
- Link with the problem-reporting system for tracking solutions.

#### Figure 6.3. Flow of a Change Control Process:
- Illustrates the flow of a change control process.
- Change request submission, evaluation, and decision-making.
- Represents the typical flow of a change request process.

#### 3.2 Implementing Software Changes:

**Implementation of Approved SCRs:**
- Use of defined software procedures.
- Tracking incorporated SCRs into software versions and baselines.
- Configuration audits and software quality verification.

**Source Code Version Control Tools:**
- Tracking and documenting changes to source code.
- Single repository for storing source code.
- Preventing simultaneous editing of the same module.
- Recording all changes made to the source code.
- Checking out, making changes, documenting, and saving edited modules.
- Discarding changes if needed.

#### 3.3 Deviations and Waivers:

**Deviations and Waivers:**
- Deviation: Authorization to depart from a performance or design requirement.
- Waiver: Authorization to accept an item departing from specified requirements.
- Formal process for gaining approval for deviations or waivers.

### 4 Software Configuration Status Accounting

#### 4.1 Software Configuration Status Information

**SCSA Activity:**
- Element of configuration management.
- Captures and reports necessary information.
- Identifies, collects, and maintains configuration status information.
- Automated tool support: database, stand-alone tool, or integrated tool environment.
  
#### 4.2 Software Configuration Status Reporting

**Reported Information:**
- Used by organizational and project elements.
- Ad hoc queries or periodic production of reports.
- Quality assurance records.
- Basis for various measurements (e.g., change requests per SCI, average time to implement a change request).

### 5 Software Configuration Auditing

#### 5.1 Software Functional Configuration Audit

**Purpose:**
- Ensure audited software item consistency with governing specifications.
- Key input: output of software verification and validation activities.
  
#### 5.2 Software Physical Configuration Audit

**Purpose:**
- Ensure design and reference documentation consistency with the as-built software product.

#### 5.3 In-Process Audits of a Software Baseline

**In-Process Audits:**
- Conducted during the development process.
- Investigate current status of specific configuration elements.
- Applied to sampled baseline items.
- Ensure performance consistency with specifications.
- Ensure evolving documentation consistency with developing baseline item.

### 6 Software Release Management and Delivery

#### 6.1 Software Building

**Software Building Activity:**
- Combines correct versions of software configuration items into an executable program for delivery.
- Involves appropriate configuration data.
- Build instructions ensure proper build steps in the correct sequence.
- Capability to reproduce previous releases for recovery, testing, maintenance, or additional release purposes.
- SCM control over supporting tools and associated build instructions.
- Tool capability for selecting correct versions, automating the build process, and ensuring availability of correct tool versions.
- Outputs subject to software quality verification.
- Outputs might become quality assurance records.

#### 6.2 Software Release Management

**Release Management:**
- Encompasses identification, packaging, and delivery of product elements.
- Elements include executable program, documentation, release notes, and configuration data.
- Concerns determining when to issue a release based on severity of problems and fault densities.
- Packaging identifies product items for delivery, selects correct variants, and uses a version description document.
- Release notes describe new capabilities, known problems, and platform requirements.
- Package includes installation or upgrading instructions.
- Release management might be required to track product distribution to various customers or target systems.
- Mechanism to ensure integrity of the released item (e.g., digital signature).
- Tool capability needed for supporting release management functions.
- Connection with change request process tool for mapping release contents to received change requests.

### 7 Software Configuration Management Tools

#### 7.1 Individual Support Tools

**Tools for Small Organizations or Development Groups:**
1. **Version Control Tools:**
   - Track, document, and store individual configuration items (e.g., source code).
2. **Build Handling Tools:**
   - Compile and link executable versions; advanced tools perform quality checks, regression tests, and produce reports.
3. **Change Control Tools:**
   - Support control of change requests and events notification.

#### 7.2 Project-Related Support Tools

**Tools for Medium to Large Organizations:**
- Support workspace management for development teams and integrators.
- Able to handle distributed development environments.
- Appropriate for organizations with variants of software products and parallel development but no certification requirements.

#### 7.3 Companywide-Process Support Tools

**Tools for Formal Development Processes:**
- Automate portions of companywide processes.
- Provide support for workflow management, roles, responsibilities.
- Handle many items, data, and life cycles.
- Support more formal development processes, including certification requirements.
