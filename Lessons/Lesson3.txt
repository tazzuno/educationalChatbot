### Chapter 3: Software Construction

#### ACRONYMS
- **API:** Application Programming Interface
- **COTS:** Commercial Off-the-Shelf
- **GUI:** Graphical User Interface
- **IDE:** Integrated Development Environment
- **OMG:** Object Management Group
- **POSIX:** Portable Operating System
- **TDD:** Test-Driven Development
- **UML:** Unified Modeling Language

#### INTRODUCTION
The term **software construction** encompasses the meticulous creation of functional software by integrating coding, verification, unit testing, integration testing, and debugging. The Software Construction knowledge area (KA) maintains strong connections with other KAs, particularly Software Design and Software Testing, as the construction process significantly involves design and testing activities. The process leverages design outputs and contributes to testing activities, where "design" and "testing" refer to specific activities, not just the KAs.

Boundaries between design, construction, and testing may vary based on the software life cycle processes employed in a project. While some detailed design work may precede construction, a substantial amount of design is carried out during the construction phase. Hence, the Software Construction KA is intricately connected to the Software Design KA. Throughout the construction phase, software engineers engage in both unit testing and integration testing, further solidifying the link between the Software Construction KA and the Software Testing KA.

Software construction typically results in the generation of numerous configuration items that require effective management in a software project, including source files, documentation, and test cases. Consequently, the Software Construction KA is closely associated with the Software Configuration Management KA. Although software quality is imperative across all KAs, the code stands out as the ultimate deliverable of a software project. Therefore, the Software Quality KA is closely tied to the Software Construction KA.

Given that software construction demands knowledge of algorithms and coding practices, it exhibits a close relationship with the Computing Foundations KA. This KA addresses the computer science foundations essential for supporting the design and construction of software products. Additionally, software construction intersects with project management, particularly concerning the challenges associated with managing the construction phase.

### 1 Software Construction Fundamentals

#### 1.1 Minimizing Complexity
Most people have limitations in holding complex structures and information in their working memories, emphasizing the need to minimize complexity in software construction. This imperative applies to various aspects of software construction, with a particular emphasis on testing. Achieving reduced complexity involves prioritizing simple and readable code over clever solutions. This goal is supported by adhering to standards, employing modular design, and utilizing specific techniques.

#### 1.2 Anticipating Change
The inevitability of software evolution drives the importance of anticipating change in software construction. Software engineers strive to build extensible software that can be enhanced without disrupting the underlying structure. This principle is supported by various techniques, particularly those detailed in the coding process.

#### 1.3 Constructing for Verification
Constructing for verification involves building software in a way that facilitates the discovery of faults by software engineers, testers, and users during independent testing and operational activities. Techniques supporting this objective include following coding standards for code reviews and unit testing, organizing code for automated testing, and avoiding complex or hard-to-understand language structures.

#### 1.4 Reuse
Reuse in software construction involves employing existing assets such as libraries, modules, components, source code, and commercial off-the-shelf (COTS) assets. Systematic reuse, guided by a well-defined process, can significantly improve productivity, quality, and cost-effectiveness. Reuse encompasses "construction for reuse" (creating reusable assets) and "construction with reuse" (utilizing existing assets in building new solutions), often extending beyond project boundaries.

#### 1.5 Standards in Construction
Applying external or internal development standards during construction contributes to project efficiency, quality, and cost-effectiveness. These standards encompass communication methods, programming languages, coding standards, platforms, and tools. External standards, sourced from entities like the Object Management Group (OMG) or IEEE, guide construction in areas such as languages, tools, and interfaces. Internal standards, developed at the organizational or project level, support coordination, complexity reduction, change anticipation, and verification in construction activities.

### 2 Managing Construction

#### 2.1 Construction in Life Cycle Models
Software development employs various life cycle models, some of which prioritize construction differently. Linear models like the waterfall and staged-delivery treat construction as an activity following significant prerequisite work, emphasizing activities before construction, such as detailed requirements and extensive design. In contrast, iterative models like evolutionary prototyping and agile development treat construction as concurrent or overlapping with other development activities. The definition of "construction" depends on the life cycle model used. In general, software construction involves coding, debugging, construction planning, detailed design, unit testing, integration testing, and more.

#### 2.2 Construction Planning
Construction planning is a critical aspect that involves choosing a construction method, impacting the performance of construction prerequisites, their order, and the timing of completion before construction starts. The construction approach influences the team's ability to handle complexity, anticipate change, and construct for verification. It determines the order of component creation and integration, integration strategy (e.g., phased or incremental), software quality management processes, task assignments, and more, based on the chosen method.

#### 2.3 Construction Measurement
Various construction activities and artifacts can be measured, encompassing aspects like code development, modification, reuse, destruction, complexity, inspection statistics, fault-fix and fault-find rates, effort, and scheduling. These measurements serve purposes such as managing construction, ensuring quality, and improving the construction process. The utilization of measurement in software engineering processes is essential for effective management.

### 3 Practical Considerations

#### 3.1 Construction Design
Construction involves dealing with real-world constraints, making it more driven by practical considerations than some other knowledge areas in software engineering. Design work occurs at the construction level, dictated by constraints imposed by the real-world problem being addressed. Construction design encompasses detailed design work on a smaller scale, focusing on algorithms, data structures, and interfaces.

#### 3.2 Construction Languages
Construction languages include various forms of communication for specifying executable problem solutions. They range from configuration languages and toolkit languages to scripting languages and programming languages. The choice of a construction language can impact software quality attributes and contribute to security vulnerabilities. Programming languages can be linguistic, formal, or visual, each with its distinctive features.

#### 3.3 Coding
Coding in software construction involves creating understandable source code, utilizing entities like classes, enumerated types, control structures, and handling error conditions. Considerations include preventing code-level security breaches, managing resource usage, organizing source code, and providing documentation. Proper coding practices contribute to creating reliable and secure software.

#### 3.4 Construction Testing
Construction testing encompasses unit testing and integration testing, aiming to reduce the gap between fault insertion and detection. Test cases may be written before or after code development. Construction testing focuses on specific types of testing and excludes others, such as system testing, stress testing, and usability testing. Standards like IEEE Standard 829-1998 and IEEE Standard 1008-1987 guide construction testing practices.

#### 3.5 Construction for Reuse
Construction for reuse involves creating software with the potential for future reuse. It is based on variability analysis and design, aiming to encapsulate reusable code fragments into well-structured libraries or components. Tasks include variability implementation, encapsulation, testing, and describing reusable assets.

#### 3.6 Construction with Reuse
Construction with reuse entails creating new software by leveraging existing software assets. Reusable units, databases, test procedures, or test data are selected, evaluated for reusability, integrated into the current software, and relevant information is reported. Open-source libraries and organizational repositories are common sources of reused code.

#### 3.7 Construction Quality
Construction quality activities focus on ensuring the quality of code and closely related artifacts. Techniques include unit testing, integration testing, test-first development, assertions, defensive programming, debugging, inspections, technical reviews, and static analysis. Quality activities during construction primarily center on code, emphasizing security and adherence to good practices.

#### 3.8 Integration
Integration during construction involves combining individually constructed elements into a single system or integrating a software system with other systems. Concerns include planning integration sequences, hardware requirements, creating scaffolding, determining testing and quality work for components, and establishing points for interim software testing. Phased and incremental integration approaches are common, with incremental integration offering advantages like easier error location and improved progress monitoring.

### 4 Construction Technologies

#### 4.1 API Design and Use
API design involves creating user-friendly interfaces for libraries or frameworks. A well-designed API is easy to learn, hard to misuse, and provides clear semantics. API use encompasses selecting, learning, testing, integrating, and possibly extending APIs, aiming to facilitate development and maintenance of client applications.

#### 4.2 Object-Oriented Runtime Issues
Object-oriented languages support runtime mechanisms like polymorphism and reflection, enhancing flexibility and adaptability. Polymorphism enables general operations without knowing concrete object types in advance, while reflection allows a program to observe and modify its structure and behavior at runtime.

#### 4.3 Parameterization and Generics
Parameterized types or generics enable defining types or classes without specifying all used types, providing a way to compose behaviors in object-oriented software. This approach adds flexibility and reusability to the construction process.

#### 4.4 Assertions, Design by Contract, and Defensive Programming
Assertions, executable predicates in a program, aid in runtime checks and are useful for high-reliability programs. Design by contract involves specifying preconditions and postconditions for routines, forming contracts that improve software quality. Defensive programming safeguards routines from invalid inputs, often using assertions for input value checks.

#### 4.5 Error Handling, Exception Handling, and Fault Tolerance
Effective error handling impacts correctness, robustness, and nonfunctional attributes of software. Techniques include assertions, returning neutral values, logging warnings, and using exceptions for error detection and processing. Fault tolerance strategies, like backing up and retrying or using voting algorithms, enhance software reliability.

#### 4.6 Executable Models
Executable models abstract software details and can be deployed in various environments without modification. They support the Model-Driven Architecture (MDA) initiative, providing a way to specify Platform Independent Models (PIM) and generate Platform Specific Models (PSM) for implementation.

#### 4.7 State-Based and Table-Driven Construction Techniques
State-based programming uses finite state machines to describe program behaviors, combining with object-oriented programming for a composite approach. Table-driven methods use tables to look up information, offering simplicity and ease of modification compared to complex logic.

#### 4.8 Runtime Configuration and Internationalization
Runtime configuration supports late binding of variables, allowing dynamic updates through configuration files. Internationalization prepares programs for multiple locales, accommodating string and character-set issues for diverse language support.

#### 4.9 Grammar-Based Input Processing
Grammar-based input processing involves syntax analysis or parsing of input token streams, creating parse trees to represent input data. This technique aids in processing and interpreting input data within a program.

#### 4.10 Concurrency Primitives
Concurrency primitives, like semaphores, monitors, and mutexes, facilitate synchronization in concurrent programming environments. These abstractions control access to shared resources and ensure mutual exclusion, enhancing the reliability of concurrent systems.

#### 4.11 Middleware
Middleware provides services above the operating system layer, facilitating communication and interaction between software components. It includes runtime containers, message passing, and supports service-oriented communication between applications.

#### 4.12 Construction Methods for Distributed Software
Construction of distributed software addresses issues like parallelism, communication, and fault tolerance. Various architectural categories, including client-server, 3-tier, n-tier, distributed objects, and more, influence the construction of distributed systems.

#### 4.13 Constructing Heterogeneous Systems
Heterogeneous systems involve different specialized computational units, requiring hardware/software codesign. Challenges include multilanguage validation, cosimulation, and interfacing to design and develop these systems concurrently.

#### 4.14 Performance Analysis and Tuning
Performance analysis investigates a program's behavior to identify areas for improvement, while code tuning involves modifying correct code to enhance efficiency. Techniques include tuning logic expressions, loops, data transformations, and using low-level languages for optimization.

#### 4.15 Platform Standards
Platform standards enable the development of portable applications that can run in compatible environments without modifications. These standards define services and APIs, promoting compatibility across various platforms.

#### 4.16 Test-First Programming
Test-first programming, or Test-Driven Development (TDD), involves writing test cases before code development. This approach helps detect defects early, promotes code correctness, and forces programmers to think about requirements and design before coding.

### 5 Software Construction Tools

#### 5.1 Development Environments
A Development Environment, or Integrated Development Environment (IDE), is crucial for software construction. It integrates various development tools, offering features such as code editing, compilation, error detection, source code control integration, build/test/debugging tools, program views, automated code transforms, and support for refactoring. The choice of IDE can significantly impact the efficiency and quality of software construction.

#### 5.2 GUI Builders
GUI (Graphical User Interface) builders are tools that facilitate the creation and maintenance of GUIs in a WYSIWYG mode. These tools typically include visual editors for designing forms and windows, allowing developers to manage widget layout through drag-and-drop and parameter settings. Some GUI builders can automatically generate corresponding source code based on the visual design. Modern IDEs often provide integrated or plug-in GUI builders, streamlining the development of GUI applications.

#### 5.3 Unit Testing Tools
Unit testing tools and frameworks are essential for verifying the functionality of software modules in isolation. These tools enable developers to automate unit testing, incorporating criteria into tests to verify correctness under various data sets. Unit testing tools often utilize test runners that execute individual tests, flagging and reporting any failed test cases. Automated unit testing enhances software reliability and facilitates continuous integration practices.

#### 5.4 Profiling, Performance Analysis, and Slicing Tools
Performance analysis tools, particularly profiling tools, support code tuning by monitoring code execution and recording metrics such as execution frequency or time spent on each statement or path. Profiling tools identify hot spots in the code, guiding developers in optimizing performance. Program slicing tools compute sets of program statements (slices) that may affect specified variables at a given point, aiding in error localization, program understanding, and optimization analysis. These tools leverage static or dynamic analysis methods for various programming languages.
