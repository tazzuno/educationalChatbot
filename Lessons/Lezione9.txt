### Chapter 9: Software Engineering Models

#### ACRONYMS
- 3GL: 3rd Generation Language
- BNF: Backus-Naur Form
- FDD: Feature-Driven Development
- IDE: Integrated Development Environment
- PBI: Product Backlog Item
- RAD: Rapid Application Development
- UML: Unified Modeling Language
- XP: eXtreme Programming

#### INTRODUCTION
Software engineering models and methods play a crucial role in bringing structure to software engineering, aiming for systematic, repeatable, and success-oriented practices. Models provide a problem-solving approach with notations and procedures for analysis, while methods guide the systematic specification, design, construction, test, and verification of software and its associated work products. This knowledge area (KA) focuses on models and methods covering multiple software life cycle phases.

#### BREAKDOWN OF TOPICS

1. **Modeling:**
   - Discusses general modeling practices.
   - Covers modeling principles, properties, and expression of models.
   - Explores modeling syntax, semantics, and pragmatics.
   - Addresses preconditions, postconditions, and invariants.

2. **Types of Models:**
   - Provides a brief overview of models and submodel aggregation.
   - Highlights general characteristics of model types commonly found in software engineering.

3. **Analysis of Models:**
   - Presents common analysis techniques used in modeling.
   - Focuses on verifying completeness, consistency, correctness, traceability, and interaction of models.

4. **Software Engineering Methods:**
   - Offers a brief summary of commonly used software engineering methods.
   - Guides the reader through heuristic methods, formal methods, prototyping, and agile methods.

*[Figure 9.1: Breakdown of Topics for the Software Engineering Models and Methods KA](http://swebokwiki.org/File:Breakdown_of_Topics_for_the_Software_Engineering_Models_and_Methods.jpg).*

### 1 Modeling

Modeling of software is an increasingly pervasive technique aimed at aiding software engineers in comprehending, engineering, and effectively communicating aspects of the software to relevant stakeholders. Stakeholders encompass individuals or parties with a stated or implied interest in the software, including users, buyers, suppliers, architects, certifying authorities, evaluators, developers, and software engineers. While numerous modeling languages, notations, techniques, and tools exist, there are overarching principles applicable to all. The following sections provide insights into these general concepts.

#### 1.1 Modeling Principles

Modeling furnishes a structured and systematic approach for representing significant software aspects, facilitating decision-making, and communicating decisions to stakeholders. Three guiding principles underpin modeling activities:

1. **Model the Essentials:**
   - Good models focus on specific aspects or features needed for decision-making.
   - Abstract away nonessential information to keep models manageable and useful.

2. **Provide Perspective:**
   - Modeling offers views of the software using defined rules within each view.
   - Perspective-driven approach provides dimensionality to the model (e.g., structural, behavioral, temporal, organizational views).

3. **Enable Effective Communications:**
   - Modeling employs the application domain vocabulary, a modeling language, and semantic expression.
   - Rigorous and systematic modeling facilitates effective communication of software information to project stakeholders.

A model is an abstraction of a software component, representing an aggregation of abstractions that describe selected aspects or views. Assumptions about the model's context should be captured and validated when reusing the model in a new context.

#### 1.2 Properties and Expression of Models

Properties of models, such as completeness, consistency, and correctness, characterize a model within the chosen notation and tooling. Models are constructed to represent real-world objects and behaviors, and their exploration, simulation, or review can uncover uncertainties or unanswered questions. Models consist of entities representing concrete or abstract artifacts, connected by relations using textual or graphical modeling languages. Expression elements may include shape, textual attributes, or both. Multiple views may be necessary to capture the needed semantics of the software. Automation-supported models undergo checks for completeness and consistency, with correctness validated through simulation and/or review.

#### 1.3 Syntax, Semantics, and Pragmatics

Models, as abstractions, can be deceptive due to missing information. Modeling languages have syntactic and semantic rules, defined using notation grammar or graphical models called metamodels. Semantics specify the meaning attached to entities and relations, with pragmatics explaining how meaning is embodied in the model and effectively communicated. Caution is needed regarding modeling and semantics, especially when importing model parts from another context, as semantic discord may lead to errors during software evolution.

#### 1.4 Preconditions, Postconditions, and Invariants

When modeling functions or methods, software engineers define assumptions about the software's state before, during, and after execution. These assumptions include:
- **Preconditions:** Conditions that must be satisfied before execution.
- **Postconditions:** Conditions guaranteed to be true after successful execution.
- **Invariants:** Conditions persisting before and after execution, crucial for the function or method's correct operation.

### 2 Types of Models

A typical software model is a composite of submodels, each serving a specific purpose and often comprised of one or more diagrams. These submodels, created for distinct purposes, may use a single or multiple modeling languages. The Unified Modeling Language (UML) recognizes three broad types of models commonly employed in software engineering: information models, behavioral models, and structure models.

#### 2.1 Information Modeling

**Information models** focus on data and information, offering an abstract representation that identifies and defines concepts, properties, relations, and constraints on data entities. The semantic or conceptual information model provides formalism and context from a problem perspective. It is an abstraction, including only the necessary elements to conceptualize the real-world view of information. Transformations from the semantic model lead to logical and then physical data models implemented in software.

#### 2.2 Behavioral Modeling

**Behavioral models** define the functions of the software, taking three basic forms: state machines, control-flow models, and dataflow models.

1. **State Machines:**
   - Model software as defined states, events, and transitions.
   - Transitions occur based on triggering events in the modeled environment.

2. **Control-Flow Models:**
   - Depict how sequences of events activate or deactivate processes.

3. **Dataflow Models:**
   - Represent the movement of data through processes toward data stores or sinks.

#### 2.3 Structure Modeling

**Structure models** illustrate the physical or logical composition of software, defining the boundary between the software and its operational environment. Common structural constructs in structure modeling include:

- Composition, decomposition, generalization, and specialization of entities.
- Identification of relations and cardinality between entities.
- Definition of process or functional interfaces.

UML provides various structure diagrams for modeling, including class, component, object, deployment, and packaging diagrams. These diagrams aid in visualizing and understanding the composition and organization of software components in a structured manner.

### 3 Analysis of Models

The development of software models is a crucial aspect of software engineering, allowing engineers to study and understand the structure, function, operational usage, and assembly considerations associated with software. However, the utility of these models depends on their completeness, consistency, and correctness. The analysis techniques discussed below ensure that the models serve their intended purpose and provide value to stakeholders.

#### 3.1 Analyzing for Completeness

Completeness is vital from requirements elicitation to code implementation. It ensures that all specified requirements are implemented and verified. Techniques for analyzing completeness include structural analysis and state-space reachability analysis, both automated using modeling tools and manual through inspections or reviews. Errors and warnings identified indicate corrective actions needed for model completeness.

#### 3.2 Analyzing for Consistency

Consistency, ensuring no conflicting elements within models, is checked using automated analysis functions in modeling tools or manually through inspections. Consistency checks aim to identify conflicts in requirements, assertions, constraints, functions, or component descriptions. Detected errors or warnings guide corrective actions.

#### 3.3 Analyzing for Correctness

Correctness involves verifying both syntactic and semantic aspects of the model. Syntactic correctness checks adherence to modeling language grammar and constructs, while semantic correctness ensures the accurate representation of the modeled elements. Analysis for correctness can be automated with modeling tools or conducted manually through inspections or reviews. Corrective actions address identified defects before software release.

#### 3.4 Traceability

Traceability involves mapping and controlling relationships between various work products such as planning documents, process specifications, software requirements, diagrams, designs, code, and test cases. Traceability ensures consistency between requirements, models, and work products, providing assurances to stakeholders. It aids in change analysis post-development and is managed using automated or manual means in modeling tools.

#### 3.5 Interaction Analysis

Interaction analysis focuses on dynamic behavior and communication or control flow relations between entities in a software model. It examines interactions within the model and between different software layers. Simulation facilities in modeling environments allow the software engineer to step through interactions, verifying that different parts of the software collaborate effectively to provide intended functions. Interaction analysis is particularly valuable for applications with user interface software.

### 4 Software Engineering Methods

Software engineering methods play a crucial role in the organized and systematic development of software. The choice of a method significantly influences the success of a software project. This section explores various software engineering methods, categorizing them into Heuristic Methods, Formal Methods, Prototyping Methods, and Agile Methods.

#### 4.1 Heuristic Methods

**Structured Analysis and Design Methods:**
- Focus on functional or behavioral viewpoints.
- Model components evolve from a high-level view to detailed designs.
- Convergence to specific details facilitates coding, building, testing, and verification.

**Data Modeling Methods:**
- Centered around data or information.
- Defines data models using tables and relationships.
- Primarily used for database designs or data repositories in business software.

**Object-Oriented Analysis and Design Methods:**
- Represents an object-oriented model with objects interacting through methods.
- Constructed using diagrams to capture different views of the software.
- Progressive refinement leads to detailed design and implementation.

#### 4.2 Formal Methods

**Specification Languages:**
- Mathematical basis for formal methods.
- Formal, higher-level languages used for software specification, requirements analysis, and design.
- Not directly executable; includes notation, syntax, semantics, and allowed relations.

**Program Refinement and Derivation:**
- Process of creating a lower-level specification through successive transformations.
- Derives an executable representation of a program.
- Requires precise semantic properties in specifications.

**Formal Verification:**
- Involves model checking for consistency, completeness, and correctness.
- State-space exploration or reachability analysis.
- Requires a rigorously specified model in the form of a finite state machine or similar.

**Logical Inference:**
- Designs software by specifying preconditions and postconditions.
- Mathematical logic used to develop proofs without executing the software.
- Some Integrated Development Environments (IDEs) include tools for representing these proofs.

#### 4.3 Prototyping Methods

**Prototyping Style:**
- Various approaches, including throwaway code, evolutionary design, or executable specification.
- Chosen based on project needs, quality requirements, and urgency.

**Prototyping Target:**
- Targets specific products such as requirements, architectural elements, algorithms, or user interfaces.

**Prototyping Evaluation Techniques:**
- Prototypes evaluated against implemented software or target requirements.
- May serve as a model for future software development efforts.

#### 4.4 Agile Methods

**Rapid Application Development (RAD):**
- Used in data-intensive, business systems application development.
- Enabled by special-purpose database development tools.

**eXtreme Programming (XP):**
- Utilizes stories or scenarios for requirements, test-driven development, and continuous code refactoring.
- Emphasizes customer involvement, pair programming, and frequent releases.

**Scrum:**
- Project management-friendly agile approach with sprints lasting up to 30 days.
- Involves a Product Backlog Item (PBI) list and daily scrum meetings.

**Feature-Driven Development (FDD):**
- Model-driven, iterative development with a five-phase process.
- Emphasizes overall architectural approach and individual code ownership.

Agile methods, born in the 1990s, focus on iterative development, self-organizing teams, simpler designs, and frequent customer involvement. Various approaches like RAD, XP, Scrum, and FDD offer flexibility in project management and development cycles. The choice between heavyweight and agile methods depends on organizational needs, often resulting in the creation of hybrid methods to address specific business requirements.
