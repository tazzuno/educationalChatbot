### Chapter 5: Software Maintenance

#### Acronyms
- MR: Modification Request
- PR: Problem Report
- SCM: Software Configuration Management
- SLA: Service-Level Agreement
- SQA: Software Quality Assurance
- V&V: Verification and Validation

#### Introduction
Software development results in delivering a product satisfying user requirements, leading to the inevitability of software evolution. The maintenance phase, post-warranty or post-implementation, is essential as defects emerge, environments change, and new requirements arise. Software maintenance involves pre and post-delivery activities, ranging from planning and maintainability to modifications and user support.

![Figure 5.1: Breakdown of Topics for the Software Maintenance KA](http://swebokwiki.org/images/0/0c/Software-maintenance.jpg)

The Software Maintenance knowledge area (KA) is interconnected with all software engineering aspects, emphasizing its significance in the software life cycle.

#### Breakdown of Topics for Software Maintenance

1. **Software Maintenance Fundamentals**
   - **1.1 Definitions and Terminology:** Defines the purpose of software maintenance, emphasizing predelivery aspects.
   - **1.2 Nature of Maintenance:** Describes how maintenance sustains the software product throughout its life cycle, involving modification requests, analysis, code modification, testing, and release.
   - **1.3 Need for Maintenance:** Highlights the importance of maintenance in satisfying user requirements, applicable across various software life cycle models.
   - **1.4 Majority of Maintenance Costs:** Acknowledges that over 80% of maintenance addresses noncorrective actions, dispelling the misconception that maintenance is solely about fixing faults.
   - **1.5 Evolution of Software:** Traces the evolution of software maintenance, introducing eight Laws of Evolution and emphasizing its continuous nature.
   - **1.6 Categories of Maintenance:** Introduces corrective, adaptive, perfective, and preventive maintenance categories, emphasizing their importance in software maintenance.

The breakdown provides a comprehensive understanding of the fundamental concepts and categories essential for effective software maintenance.

### 2 Key Issues in Software Maintenance

Software maintenance introduces unique challenges for both technical and management aspects. Addressing these challenges is crucial for effective maintenance. The issues are categorized into technical issues, management issues, cost estimation, and measurement.

#### 2.1 Technical Issues

- **2.1.1 Limited Understanding:**
  - *Description:* Refers to the challenge of quickly comprehending software developed by others. Approximately half of the maintenance effort is dedicated to understanding existing software, particularly challenging in text-oriented representations.
  - *Considerations:* Software engineers need to improve comprehension, especially in the absence of developers and documentation.

- **2.1.2 Testing:**
  - *Description:* Involves the significant cost and coordination challenges of retesting major software pieces. Regression testing is crucial in maintenance, but finding time and coordinating tests pose difficulties.
  - *Considerations:* Replicating or verifying problems, coordinating tests, and dealing with critical software functions are ongoing challenges.

- **2.1.3 Impact Analysis:**
  - *Description:* Describes the cost-effective analysis of the impact of software changes. Maintainers must possess a deep understanding of the software's structure to identify affected systems, estimate resources, and assess risks.
  - *Considerations:* Impact analysis is critical after a change request enters the software configuration management process.

- **2.1.4 Maintainability:**
  - *Description:* IEEE 14764 defines maintainability as the capability of a software product to be modified. It includes corrections, improvements, and adaptations.
  - *Considerations:* Achieving maintainability is challenging due to the often neglected subcharacteristics during software development. Systematic processes and tools enhance maintainability.

#### 2.2 Management Issues

- **2.2.1 Alignment with Organizational Objectives:**
  - *Description:* Focuses on demonstrating the return on investment of software maintenance activities, which often extends the life of software.
  - *Considerations:* The challenge lies in proving the return on investment, especially when the objectives are to meet user demand for updates and enhancements.

- **2.2.2 Staffing:**
  - *Description:* Addresses the challenge of attracting and retaining maintenance staff, often viewed as less glamorous than development roles.
  - *Considerations:* Morale in maintenance teams suffers due to perceptions, requiring measures to improve job satisfaction.

- **2.2.3 Process:**
  - *Description:* Highlights the commonalities and differences between software maintenance and development processes.
  - *Considerations:* Maintenance requires activities not found in development, presenting challenges to management.

- **2.2.4 Organizational Aspects of Maintenance:**
  - *Description:* Deals with deciding which organization or function will be responsible for software maintenance.
  - *Considerations:* Decisions should be made based on the benefits of specialization, communication channels, an egoless atmosphere, reduced dependency, and periodic checks.

- **2.2.5 Outsourcing:**
  - *Description:* Addresses the trend of outsourcing and offshoring software maintenance.
  - *Considerations:* Organizations need to determine the scope, service-level agreements, and contractual details, with a significant initial investment required.

#### 2.3 Maintenance Cost Estimation

- **2.3.1 Cost Estimation:**
  - *Description:* Describes how impact analysis is crucial for estimating the resources needed for software maintenance.
  - *Considerations:* Estimation involves parametric models and experience, with the combination of both being an effective approach.

- **2.3.2 Parametric Models:**
  - *Description:* Highlights the application of mathematical models to estimate maintenance costs, requiring historical data for calibration.
  - *Considerations:* Cost driver attributes significantly impact estimates.

- **2.3.3 Experience:**
  - *Description:* Stresses the role of expert judgment and experience in estimating maintenance effort.
  - *Considerations:* Combining historical data and experience provides a more accurate estimation.

#### 2.4 Software Maintenance Measurement

- **2.4.1 Specific Measures:**
  - *Description:* Discusses software measures related to maintainability subcharacteristics, including analyzability, changeability, stability, and testability.
  - *Considerations:* Establishing a measurement program based on software quality models facilitates effective maintenance.

These key issues encompass technical, management, cost estimation, and measurement challenges, highlighting the complexities associated with software maintenance. Addressing these challenges is crucial for the success of maintenance activities.


### 3 Maintenance Process

The maintenance process involves various activities that are essential for modifying existing software while preserving its integrity. In addition to standard software engineering processes, there are unique activities, supporting activities, and planning activities specific to software maintenance.

#### 3.1 Maintenance Processes

The maintenance process encompasses activities such as process implementation, problem and modification analysis, modification implementation, maintenance review/acceptance, migration, and software retirement. Various maintenance process models, including quick fix, spiral, Osbornes, iterative enhancement, and reuse-oriented, have been utilized. Recently, agile methodologies have been adapted to maintenance to meet the demand for fast turnaround.

#### 3.2 Maintenance Activities

**3.2.1 Unique Activities:**
- **Program Understanding:**
  - *Description:* Activities to obtain a general knowledge of what a software product does and how its parts work together.
  - *Considerations:* Essential for maintainers to comprehend the software for effective modifications.

- **Transition:**
  - *Description:* A controlled and coordinated sequence of activities for the progressive transfer of software from the developer to the maintainer.
  - *Considerations:* Ensures a smooth transfer of responsibility and knowledge between development and maintenance.

- **Modification Request Acceptance/Rejection:**
  - *Description:* Evaluation and potential rejection of modifications that exceed certain size/effort/complexity criteria.
  - *Considerations:* Maintainers may reject large modifications, rerouting them to developers for handling.

- **Maintenance Help Desk:**
  - *Description:* End-user and maintenance coordinated support function triggering assessment, prioritization, and costing of modification requests.
  - *Considerations:* Facilitates effective communication between users and maintainers for issue resolution.

- **Impact Analysis:**
  - *Description:* Technique to identify areas impacted by a potential change.
  - *Considerations:* Essential for assessing the consequences and resource requirements of a proposed modification.

- **Maintenance Service-Level Agreements (SLAs) and Contracts:**
  - *Description:* Contractual agreements describing services and quality objectives for maintenance.
  - *Considerations:* Define expectations and obligations between maintainers and stakeholders.

**3.2.2 Supporting Activities:**
- **Documentation, Software Configuration Management, Verification and Validation, Problem Resolution, Software Quality Assurance, Reviews, Audits:**
  - *Description:* Various support activities performed by maintainers.
  - *Considerations:* Contribute to the overall quality and reliability of the maintenance process.

- **Training:**
  - *Description:* Activity involving the training of maintainers and users.
  - *Considerations:* Essential for ensuring that maintainers and users are equipped to handle software modifications and updates.

**3.2.3 Maintenance Planning Activities:**
- **Business Planning, Maintenance Planning, Release/Version Planning, Individual Software Change Request Planning:**
  - *Description:* Planning activities at different levels addressing organizational, transition, software, and request-specific perspectives.
  - *Considerations:* Involves estimating resources, assessing risks, and ensuring effective communication with stakeholders.

**3.2.4 Software Configuration Management:**
- *Description:* Describes software configuration management as a critical element of the maintenance process.
- *Considerations:* Ensures control over software changes, with Configuration Control Boards determining the content of the next release/version.

**3.2.5 Software Quality:**
- *Description:* Emphasizes the importance of a software quality program in the maintenance process.
- *Considerations:* Planned activities, including Software Quality Assurance (SQA), Verification and Validation (V&V), reviews, and audits, are crucial for maintaining and improving software quality.

These maintenance activities and processes are essential for the effective modification and long-term sustainability of software products. Planning, documentation, and quality assurance play significant roles in ensuring the success of software maintenance efforts.


### 4 Techniques for Maintenance

This section introduces several generally accepted techniques used in software maintenance:

#### 4.1 Program Comprehension

- **Description:**
  - Programmers spend considerable time reading and understanding programs to implement changes.
  - Code browsers are key tools for program comprehension, organizing and presenting source code.
  - Clear and concise documentation aids in program comprehension.

#### 4.2 Reengineering

- **Definition:**
  - Reengineering involves the examination and alteration of software to reconstitute it in a new form, followed by the implementation of the new form.
  - Refactoring is a reengineering technique focused on reorganizing a program without changing its behavior, aiming to improve program structure and maintainability.
  - Refactoring techniques can be applied during minor changes.

#### 4.3 Reverse Engineering

- **Definition:**
  - Reverse engineering is the process of analyzing software to identify its components and inter-relationships, creating representations in another form or at higher levels of abstraction.
  - Passive process; does not change the software or result in new software.
  - Produces call graphs and control flow graphs from source code.
  - Types include redocumentation, design recovery, and data reverse engineering.
  - Tools are crucial for reverse engineering tasks.

#### 4.4 Migration

- **Description:**
  - During the software's life, it may need modification to run in different environments.
  - Maintainer determines actions needed for migration and develops a migration plan covering requirements, tools, conversion, execution, verification, and support.
  - Additional activities may include notification of intent, parallel operations, notification of completion, post-operation review, and data archival.

#### 4.5 Retirement

- **Description:**
  - Once software reaches the end of its useful life, it must be retired.
  - Analysis is performed to assist in the retirement decision, included in the retirement plan covering requirements, impact, replacement, schedule, effort, and accessibility of archive copies of data.
  - Retiring software involves activities similar to migration.

These techniques play a crucial role in the maintenance of software, ensuring its adaptability, sustainability, and eventual retirement when necessary. Program comprehension tools, reengineering techniques, reverse engineering processes, migration plans, and retirement analyses contribute to the overall effectiveness of software maintenance efforts.

### 5 Software Maintenance Tools

This section discusses tools that are particularly important in software maintenance, where existing software is being modified. Examples of these tools include:

#### Program Comprehension Tools:

1. **Program Slicers:**
   - *Function:* Selects only parts of a program affected by a change.

2. **Static Analyzers:**
   - *Function:* Allows general viewing and summaries of a program's content.

3. **Dynamic Analyzers:**
   - *Function:* Allows the maintainer to trace the execution path of a program.

4. **Data Flow Analyzers:**
   - *Function:* Allows the maintainer to track all possible data flows of a program.

5. **Cross-Referencers:**
   - *Function:* Generates indices of program components.

6. **Dependency Analyzers:**
   - *Function:* Helps maintainers analyze and understand the interrelationships between components of a program.

#### Reverse Engineering Tools:

- *Function:* Works backward from an existing product to create artifacts such as specification and design descriptions. These artifacts can then be transformed to generate a new product from an old one.

#### Other Maintenance Tools:

- **Software Test Tools:**
  - *Function:* Assists in testing modified software.

- **Software Configuration Management Tools:**
  - *Function:* Manages and controls changes to the software configuration, ensuring proper versioning and tracking.

- **Software Documentation Tools:**
  - *Function:* Aids in the documentation of software artifacts, making it easier for maintainers to understand and modify code.

- **Software Measurement Tools:**
  - *Function:* Assists in measuring various attributes related to the software, providing insights into performance, quality, and other relevant metrics.

These tools play a crucial role in the maintenance process by facilitating program comprehension, reverse engineering, testing, configuration management, documentation, and measurement. Their use enhances the efficiency and effectiveness of software maintenance activities.
