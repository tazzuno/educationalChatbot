### Chapter 7: Software Engineering Management

#### ACRONYMS
- PMBOK Guide: Guide to the Project Management Body of Knowledge
- SDLC: Software Development Life Cycle
- SEM: Software Engineering Management
- SQA: Software Quality Assurance
- SWX: Software Extension to the PMBOK Guide
- WBS: Work Breakdown Structure

#### INTRODUCTION

**Definition of Software Engineering Management:**
- Application of management activities (planning, coordinating, measuring, monitoring, controlling, and reporting) to ensure efficient, effective delivery of software products and services.
- Focus on organizational and infrastructure management, project management, and management of the measurement program.
- Measurement is a crucial aspect of all knowledge areas.
  
**Challenges in Software Engineering Management:**
- Clients often lack clarity on needs and feasibility.
- Clients may not fully appreciate the complexities of software engineering and the impact of changing requirements.
- Increased understanding and changing conditions lead to new or modified software requirements.
- Iterative process due to changing requirements.
- Balancing creativity and discipline is challenging.
- High degree of novelty and complexity.
- Rapid rate of change in underlying technology.

**Levels of Software Engineering Management:**
1. **Organizational and Infrastructure Management**
2. **Project Management**
3. **Management of the Measurement Program**

**Aspects of Organizational Management:**
- Organizational policies and procedures influencing software engineering projects.
- Policies for effective software development and maintenance.
- Policies for software engineering tasks (e.g., design, construction, estimating, monitoring, reporting).
- Personnel management policies for hiring, training, mentoring, and career development.
- Communication management importance in understanding user needs, software requirements, and designs.
- Portfolio management for an overall view of software under development and in use.
- Importance of strategic vision for software reuse.

**General Aspects of Management Relevant to Software Engineers:**
- Organizational culture and behavior influence software engineering processes.
- Management of other functional areas impacts software engineering.
- Software engineers should have knowledge of general management aspects.
- Attributes of organizational culture and behavior indirectly affect software engineering processes.

**Software Project Management:**
- Extensive information in the Guide to the Project Management Body of Knowledge (PMBOK Guide) and Software Extension to the PMBOK Guide (SWX).
- Ten project management knowledge areas relevant to software engineering management.
- Direct relevance to Software Engineering Management KA.

**Related Knowledge Areas:**
1. **Engineering Foundations KA:**
   - General concepts of measurement applicable to Software Engineering Measurement.
   - Statistical analysis concepts and techniques applicable to various topics.
2. **Software Requirements KA:**
   - Activities during the Initiation and Scope Definition phase of the project.
3. **Software Configuration Management KA:**
   - Identification, control, status accounting, auditing of software configurations.
   - Software release management and delivery.
   - Software configuration management tools.
4. **Software Engineering Process KA:**
   - Software life cycle models and relationships between processes and work products.
5. **Software Quality KA:**
   - Emphasizes quality as a goal of management and software engineering activities.
6. **Software Engineering Economics KA:**
   - Making software-related decisions in a business context.

#### KEY AREAS

#### 7.1 Software Project Management Processes

1. **Initiation and Scope Definition:**
   - Activities performed during the project initiation and scope definition phase.

2. **Software Project Planning:**
   - Planning activities for effective software project management.

3. **Software Project Enactment:**
   - Execution and control activities during the software project life cycle.

4. **Review and Evaluation:**
   - Activities related to reviewing and evaluating the software project's progress and results.

5. **Closure:**
   - Activities involved in closing the software project.

#### 7.2 Software Engineering Measurement

1. **Software Engineering Measurement:**
   - Measurement as the assignment of values and labels to software engineering work products, processes, and resources.
   - Models derived from measurements using statistical or other techniques.
   - Close relationship between software project management and software engineering measurement.

#### 7.3 Software Engineering Management Tools

1. **Software Engineering Management Tools:**
   - Tools supporting software engineering management processes.
   - Classification into three classes: individual support, project-related support, companywide-process support.

#### WORKING DEFINITIONS

- **Management:**
  - System of processes and controls to achieve strategic objectives set by the organization.

- **Measurement:**
  - Assignment of values and labels to software engineering work products, processes, resources, and derived models.
  - Models developed using statistical or other techniques.

#### CLOSING REMARKS

- **Perception of the Software Industry:**
  - Common perception of late deliveries, over-budget products, poor quality, and incomplete functionality.
  - Measurement-informed management can improve perception and reality.
  
- **Effective Management:**
  - Requires a combination of measurement and experience.
  - Lack of measurement suggests a lack of discipline; lack of management suggests a lack of purpose or context.

This Software Engineering Management KA is closely related to other KAs in the SWEBOK Guide, and reading them in conjunction is recommended for a comprehensive understanding.

### Breakdown of Topics for Software Engineering Management

The breakdown of topics for Software Engineering Management is activity-based, focusing on activities commonly performed in software development projects, regardless of the chosen software development life cycle model. The breakdown includes the following seven topics:

#### 1. Initiation and Scope Definition
   - Focus: Effective determination of software requirements and assessment of project feasibility.
   - Tasks:
     - **1.1 Determination and Negotiation of Requirements:**
       - Activities: Requirements elicitation, analysis, specification, and validation.
       - Methods: Selecting and applying methods and techniques considering various stakeholder perspectives.
       - Outcome: Determination of project scope to meet objectives and satisfy constraints.
     - **1.2 Feasibility Analysis:**
       - Purpose: Develop clear project objectives, evaluate alternative approaches, and determine project feasibility.
       - Activities: Creating project and product scope statement, defining deliverables, specifying project duration constraints, and estimating resources needed.
       - Resources: People with necessary skills, facilities, infrastructure, and support.
     - **1.3 Process for the Review and Revision of Requirements:**
       - Stakeholder Agreement: Establish means for reviewing and revising requirements and scope.
       - Change Management: Define change management procedures and iterative cycle retrospectives.
       - Flexibility: Acknowledge that scope and requirements may change throughout the project.
       - Impact Analysis: Conduct traceability and risk analysis for accepted changes.

*Note: The breakdown does not recommend a specific life cycle model and focuses on what happens without specifying when, how, or how many times each activity occurs.*

![Breakdown of Topics for the Software Engineering Management KA](http://swebokwiki.org/File:Software-engineering-management.jpg)

#### 2. Software Project Planning
   - Address activities undertaken to prepare for a successful software engineering project from a management perspective.

#### 3. Software Project Enactment
   - Deals with generally accepted software engineering management activities that occur during the execution of a software engineering project.

#### 4. Review and Evaluation
   - Ensures that technical, schedule, cost, and quality engineering activities are satisfactory.

#### 5. Closure
   - Addresses the activities accomplished to complete a project.

#### 6. Software Engineering Measurement
   - Deals with the effective development and implementation of measurement programs in software engineering organizations.

#### 7. Software Engineering Management Tools
   - Describes the selection and use of tools for managing a software engineering project.

*Note: The breakdown emphasizes a systematic approach to managing software engineering projects, recognizing the inevitability of change and the need for flexibility in requirements and scope.*

Certainly, my apologies for the oversight. Here's the corrected breakdown with the numbering as requested:

### 2. Software Project Planning

**2.1 Process Planning:**
   - SDLC Models: Choose an appropriate SDLC model based on project scope, requirements, and risk assessment.
   - Predictive vs. Adaptive SDLCs: Consider predictive (detailed planning) or adaptive (iterative) approaches.
   - Tools and Methods: Select relevant tools and methods for planning.
   
**2.2 Determine Deliverables:**
   - Identify work products for each project activity.
   - Evaluate opportunities for software component reuse and off-the-shelf products.
   - Plan procurement and supplier selection.

**2.3 Effort, Schedule, and Cost Estimation:**
   - Calibrated Estimation: Use historical data and estimation models for effort and schedule.
   - Task Dependencies: Establish dependencies and create Gantt charts.
   - Adaptive SDLC: Develop an overall estimate based on initial requirements.
   - Resource Translation: Translate resource requirements into cost estimates.
   - Iterative Estimation: Negotiate and revise estimates until consensus is reached.

**2.4 Resource Allocation:**
   - Allocate equipment, facilities, and personnel to tasks.
   - Use matrices to show responsibilities for each task.
   - Optimal Resource Use: Allocate based on resource availability and optimal utilization.

**2.5 Risk Management:**
   - Risk vs. Uncertainty: Distinguish between risk and uncertainty.
   - Identify and Analyze Risks: Identify risk factors and assess their probability and impact.
   - Mitigation Strategies: Develop strategies to reduce risk impact.
   - Risk Assessment Methods: Use methods like expert judgment, historical data, decision trees, and simulations.
   - Continuous Management: Periodically assess risks throughout the project life cycle.

**2.6 Quality Management:**
   - Identify Software Quality Requirements: Define quality requirements quantitatively and qualitatively.
   - Set Quality Thresholds: Establish acceptable thresholds for quality measurements.
   - SQA and Verification: Plan for ongoing Software Quality Assurance (SQA) and verification processes.
   
**2.7 Plan Management:**
   - Address Change Expectations: Recognize change as an expectation in software projects.
   - Systematic Monitoring: Systematically monitor, review, report, and revise plans.
   - Support Processes: Manage plans associated with supporting processes (documentation, configuration management, problem resolution).

*Note: Effective planning involves consideration of SDLC models, risk management, resource allocation, and quality assurance throughout the project life cycle.*

### 3. Software Project Enactment

#### 3.1 Implementation of Plans

- Project activities executed according to the project plan.
- Utilization of resources (personnel, technology, funding).
- Generation of work products, e.g., software design, code, test cases.

#### 3.2 Software Acquisition and Supplier Contract Management

- Contracting with customers and suppliers.
- Selection of contract types (e.g., fixed price, time and materials).
- Agreements specifying scope, deliverables, penalties, and intellectual property.
- Management of project execution in compliance with agreements.

#### 3.3 Implementation of Measurement Process

- Enactment of the measurement process during the software project.
- Collection of relevant and useful data (refer to sections 6.2 and 6.3).

#### 3.4 Monitor Process

- Continuous assessment of adherence to the project plan and related plans.
- Evaluation of outputs, completion criteria, and deliverables.
- Analysis of effort, schedule, costs, resource usage, and risk profile.
- Adherence to software quality requirements evaluated.

#### 3.5 Control Process

- Decisions based on project monitoring outcomes.
- Changes made to the project where appropriate.
- Corrective actions taken (e.g., retesting, prototyping).
- Adherence to software configuration control and management procedures.
- Possible project abandonment with adherence to relevant procedures.

#### 3.6 Reporting

- Progress reports at specified times to internal and external stakeholders.
- Focus on information needs of the target audience.
- Differentiated from detailed status reporting within the project team.

### 4. Review and Evaluation

#### 4.1 Determining Satisfaction of Requirements

- Periodic assessment of progress towards stakeholder satisfaction.
- Evaluation based on major project milestones and iterative development cycles.
- Identification of variances from software requirements.
- Implementation of software configuration control and management procedures.
- Documented decisions, communication, revision of plans, and recording of relevant data.

#### 4.2 Reviewing and Evaluating Performance

- Periodic performance reviews for project personnel.
- Insight into adherence to plans, processes, and potential areas of difficulty.
- Evaluation of effectiveness and appropriateness of methods, tools, and techniques.
- Systematic and periodic assessment of the project process for relevance and utility.
- Implementation of changes where appropriate, managed effectively.

### 5. Closure

#### 5.1 Determining Closure

- Closure confirmed when specified tasks are completed, and completion criteria are satisfied.
- Evaluation of software requirements satisfaction and achievement of objectives.
- Involvement of relevant stakeholders in closure processes.
- Documentation of relevant stakeholders' acceptance and documentation of known problems.

#### 5.2 Closure Activities

- Archiving of project materials following stakeholder-approved methods.
- Consideration of sensitive information and potential destruction of software copies.
- Updating the organization's measurement database with relevant project data.
- Undertaking a retrospective analysis of the project, phase, or iteration.
- Drawing lessons learned for organizational learning and improvement endeavors.

### 6. Software Engineering Measurement

#### 6.1 Establish and Sustain Measurement Commitment

- **Requirements for Measurement:**
  - Guided by organizational objectives and project-specific measurement requirements.
- **Scope of Measurement:**
  - Define the organizational unit (e.g., functional area, project, site, or enterprise).
  - Consider temporal scope, especially for measurements requiring time series.
- **Team Commitment to Measurement:**
  - Formally establish, communicate, and support commitment.
- **Resources for Measurement:**
  - Allocate resources, including responsibilities, funding, training, tools, and support.

#### 6.2 Plan the Measurement Process

- **Characterize the Organizational Unit:**
  - Explicitly state organizational context, including constraints.
- **Identify Information Needs:**
  - Based on goals, constraints, risks, and problems of the organizational unit.
  - Prioritize, document, communicate, and review objectives with stakeholders.
- **Select Measures:**
  - Choose measures linked to information needs, considering priorities and criteria.
  - Include measures for internal quality characteristics not in contractual requirements.
- **Define Data Collection, Analysis, and Reporting Procedures:**
  - Encompass procedures, schedules, storage, verification, analysis, reporting, and configuration management.
- **Select Criteria for Evaluating Information Products:**
  - Influenced by technical and business objectives.
  - Include evaluation criteria for both the product and the processes used in the project.
- **Provide Resources for Measurement Tasks:**
  - Obtain approval for the measurement plan from stakeholders.
  - Identify and allocate resources for successful deployment.

#### 6.3 Perform the Measurement Process

- **Integrate Measurement Procedures with Software Processes:**
  - Embed measurement procedures, including data collection, into relevant software processes.
  - Consider changes to existing processes and their impact on employees.
  - Communicate measurement procedures to data providers, providing necessary training and support.
- **Collect Data:**
  - Automate collection using software engineering management tools.
  - Aggregate, transform, or recode data during the analysis process.
  - Ensure rigor appropriate to data nature and information needs.
  - Involve data providers and measurement users in the review process.
- **Communicate Results:**
  - Document and communicate information products to users and stakeholders.

#### 6.4 Evaluate Measurement

- **Evaluate Information Products and Measurement Process:**
  - Assess strengths and weaknesses against specified evaluation criteria.
  - Conduct evaluation through internal processes or external audits, incorporating feedback.
  - Record lessons learned in a designated database.
- **Identify Potential Improvements:**
  - Propose changes in indicators, units measured, or reclassification of measurement categories.
  - Determine costs and benefits of potential improvements.
- **Communicate Proposed Improvements:**
  - Present proposed improvements to the measurement process owner and stakeholders for review and approval.
  - Communicate lack of potential improvements if the analysis doesn't identify any.

### 7. Software Engineering Management Tools

Software engineering management tools play a crucial role in providing visibility and control over software engineering management processes. These tools, whether automated or manual, contribute to planning, monitoring, and reporting project and product information. Here are some categories of software engineering management tools:

#### Project Planning and Tracking Tools

- **Purpose:**
  - Estimate project effort, cost, and prepare schedules.
- **Automated Estimation:**
  - Accept estimated size and characteristics, producing total effort, schedule, and cost estimates.
- **Scheduling Tools:**
  - Analyze tasks, durations, precedence relationships, and assigned resources to generate Gantt charts.
- **Tracking Tools:**
  - Monitor project milestones, status meetings, iteration cycles, product demonstrations, and action items.

#### Risk Management Tools

- **Purpose:**
  - Track risk identification, estimation, and monitoring.
- **Methods:**
  - Utilize approaches like simulation, decision trees, and Monte Carlo simulation.
- **Analysis:**
  - Analyze cost versus payoffs and subjective estimates of risk event probabilities.
- **Outcome:**
  - Produce probability distributions of effort, schedule, and risk.

#### Communications Tools

- **Purpose:**
  - Provide timely and consistent information to relevant stakeholders.
- **Features:**
  - Email notifications, broadcasts to team members and stakeholders.
  - Communication of meeting minutes, progress charts, backlogs, and maintenance request resolutions.

#### Measurement Tools

- **Purpose:**
  - Support activities related to the software measurement program.
- **Automation Level:**
  - Few completely automated tools in this category.
- **Functions:**
  - Gather, analyze, and report project measurement data.
- **Implementation:**
  - May involve spreadsheets developed by project team members or organizational employees.

These tools collectively contribute to the efficient management of software engineering processes, enhancing planning, communication, risk management, and measurement activities throughout the project lifecycle.
